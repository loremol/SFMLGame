cmake_minimum_required(VERSION 3.18)
project(GAME)
set(CMAKE_CXX_STANDARD 17)
set(SFML_STATIC_LIBRARIES TRUE)
set(SOURCE_FILES src/Map/Tile.cpp src/Map/Tile.h src/Map/World.cpp src/Map/World.h src/Entities/Entity.h src/Entities/Player.cpp src/Entities/Player.h src/Entities/Entity.cpp src/States/State.h src/States/StateManager.cpp src/States/StateManager.h src/AssetManager.cpp src/AssetManager.h src/InputManager.cpp src/InputManager.h src/Init.cpp src/Init.h src/Definitions.h src/States/SplashState.cpp src/States/SplashState.h src/States/MainMenuState.cpp src/States/MainMenuState.h src/States/GameState.cpp src/States/GameState.h src/States/Button.cpp src/States/Button.h src/States/PlayButton.cpp src/States/PlayButton.h src/States/ExitButton.cpp src/States/ExitButton.h src/Components/MovementComponent.cpp src/Components/MovementComponent.h src/GameLoop.cpp src/GameLoop.h src/mgr.h)
add_library(core ${SOURCE_FILES})
add_executable(GAME src/main.cpp)
add_subdirectory(./test)


if (WIN32)
    set(SFML_DIR C:/SFML/lib/cmake/SFML)
else ()
    set(SFML_DIR /usr/lib/x86_64-linux-gnu/cmake/SFML)
endif ()

find_package(SFML COMPONENTS graphics REQUIRED)
if (SFML_FOUND)
    include_directories(${SFML_INCLUDE_DIR})
    set(CMAKE_EXE_LINKER_FLAGS " -static")
    target_link_libraries(core sfml-graphics)
    target_link_libraries(GAME core)
endif()